#pragma once
#include "Mesh.h"
#include "Mat4.h"
#include "Triangle.h"

namespace Rasterizer
{
	class Entity
	{
	public:
		Entity() = delete;
		Entity(Mesh* mesh);
		Entity(Mesh* mesh, Mat4 transformation);
		Entity(Mesh* mesh, Vec3 position, Vec3 rotation = {}, Vec3 scale = { 1.f, 1.f, 1.f });
		~Entity() = default;

		Mat4 GetTransformation() const; // cannot return reference because Mat4::Create
		//void SetTransformation(Mat4 matrix);
		//void ApplyTransformation(Mat4 matrix);
		void ResetTransformation();

		void Move(Vec3 movement);
		void Scale(Vec3 scale);
		void Rotate(Vec3 rotation);

		std::vector<Vec3> const& GetNormalBuffer() const;
		std::vector<Vec3> const& GetCoordinateBuffer() const;

		std::vector<Triangle>::const_iterator begin() const;
		std::vector<Triangle>::const_iterator end() const;

	private:
		Mesh const* m_mesh;
		//Mat4 m_transformation{ Mat4::CreateIdentityMatrix() };

		Vec3 m_position;
		Vec3 m_rotation;
		Vec3 m_scale;
	};
}